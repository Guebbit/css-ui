@use "@guebbit/css-toolkit" as guebbit;
@use "../../utils" as utils;

$css-ui-class-prefix: "" !default;
$css-ui-var-prefix: "" !default;
$css-ui-root-prefix: "--" !default;
$css-ui-dark-theme-class: "theme--dark" !default;
$css-ui-component-name: "corner-ribbon" !default;

// Main $variables
$color: null !default;
$color--light: guebbit.no-null-var(($color, #000)) !default;
$color--dark: guebbit.no-null-var(($color, #fff)) !default;

// LIGHT theme
$background: $color--light !default;
$on-background: guebbit.color-contrast($background) !default;
$fold-color: guebbit.color-shade($background, 50%) !default;
$shadow-color: #000 !default;

// DARK theme
$background--dark: $color--dark !default;
$on-background--dark: guebbit.color-contrast($background--dark) !default;
$fold-color--dark: guebbit.color-shade($background--dark, 50%) !default;
$shadow-color--dark: #000 !default;

// generic
$size: 150px !default;
$height: $size * 0.33 - 2px !default;
$font-size: 18px !important;
$padding: $size * 0.1 !default;

// constants
$position-1: 16%;
$position-2: 20%;
$position-3: 1.5%;

%#{$css-ui-class-prefix}#{$css-ui-component-name},
.#{$css-ui-class-prefix}#{$css-ui-component-name} {
  @include utils.var-builder((
                  (background, guebbit.extract-colors($background), color),
                  (on-background, guebbit.extract-colors($on-background), on-color),
                  (fold-color, guebbit.extract-colors($fold-color), shadow-color),
                  (shadow-color, guebbit.extract-colors($shadow-color), shadow-color, false),

                  (size, $size),
                  (height, $height),
                  (font-size, $font-size),
                  (padding, $padding),
  ), $css-ui-var-prefix, $css-ui-component-name, $css-ui-root-prefix);

  width: var(--#{$css-ui-var-prefix}size);
  height: var(--#{$css-ui-var-prefix}size);
  overflow: hidden;
  position: absolute;

  &::before,
  &::after {
    position: absolute;
    z-index: -1;
    content: '';
    display: block;
    border: 5px solid var(--#{$css-ui-var-prefix}fold-color);
  }

  & > * {
    position: absolute;
    display: block;
    width: calc(var(--#{$css-ui-var-prefix}size) * 1.5);
    padding: var(--#{$css-ui-var-prefix}padding) 0;
    background-color: var(--#{$css-ui-var-prefix}background);
    box-shadow: 0 5px 10px rgba(var(--#{$css-ui-var-prefix}shadow-color) / .1);
    color: var(--#{$css-ui-var-prefix}on-background);
    text-shadow: 0 1px 1px rgba(var(--#{$css-ui-var-prefix}shadow-color) / var(--#{$css-ui-var-prefix}#{$css-ui-root-prefix}shadow-box-1, .2));
    line-height: 1;
    font-size: var(--#{$css-ui-var-prefix}font-size);
    text-align: center;
    min-height: var(--#{$css-ui-var-prefix}height);

    // for text-rotation
    & > * {
      display: inline-block;
      transform: rotate(180deg);
    }
  }

  &.ribbon-top-left {
    top: -$position-3;
    left: -$position-3;

    &::before,
    &::after {
      border-top-color: transparent;
      border-left-color: transparent;
    }

    &::before {
      top: 0;
      right: 0;
    }

    &::after {
      bottom: 0;
      left: 0;
    }

    & > * {
      right: -$position-1;
      top: $position-2;
      transform: rotate(-45deg);
    }
  }

  &.ribbon-top-right {
    top: -$position-3;
    right: -$position-3;

    &::before,
    &::after {
      border-top-color: transparent;
      border-right-color: transparent;
    }

    &::before {
      top: 0;
      left: 0;
    }

    &::after {
      bottom: 0;
      right: 0;
    }

    & > * {
      left: -$position-1;
      top: $position-2;
      transform: rotate(45deg);
    }
  }


  &.ribbon-bottom-left {
    bottom: -$position-3;
    left: -$position-3;

    &::before,
    &::after {
      border-bottom-color: transparent;
      border-left-color: transparent;
    }

    &::before {
      bottom: 0;
      right: 0;
    }

    &::after {
      top: 0;
      left: 0;
    }

    & > * {
      right: -$position-1;
      bottom: $position-2;
      transform: rotate(225deg);
    }
  }


  &.ribbon-bottom-right {
    bottom: -$position-3;
    right: -$position-3;

    &::before,
    &::after {
      border-bottom-color: transparent;
      border-right-color: transparent;
    }

    &::before {
      bottom: 0;
      left: 0;
    }

    &::after {
      top: 0;
      right: 0;
    }

    & > * {
      left: -$position-1;
      bottom: $position-2;
      transform: rotate(-225deg);
    }
  }
}

/**
 * Dark Theme (changes from default variables)
 */
@mixin theme-dark-builder{
  %#{$css-ui-class-prefix}#{$css-ui-component-name},
  .#{$css-ui-class-prefix}#{$css-ui-component-name} {
    @include utils.var-builder((
                    (background, guebbit.extract-colors($background--dark), color),
                    (on-background, guebbit.extract-colors($on-background--dark), on-color),
                    (fold-color, guebbit.extract-colors($fold-color--dark), shadow-color),
                    (shadow-color, guebbit.extract-colors($shadow-color--dark), shadow-color, false),
    ), $css-ui-var-prefix, $css-ui-component-name, $css-ui-root-prefix);
  }
}

/**
 * By class
 */
.#{$css-ui-dark-theme-class}{
  @include theme-dark-builder;
}

/**
 * By browser
 */
@media (prefers-color-scheme: dark) {
  @include theme-dark-builder;
}
