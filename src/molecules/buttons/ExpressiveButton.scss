@use "@guebbit/css-toolkit" as guebbit;
@use "../../utils" as utils;

// ------------------- @import clause -------------------
// ------------------------------------------------------

$css-ui-component-name: "simple-button";
@import "../../../src/atoms/buttons/SimpleButton";
$css-ui-var-prefix: "rollup-";
$css-ui-component-name: "highlight-rollup";
@import "../../../src/atoms/highlights/HighlightRollup";
$css-ui-var-prefix: "popup-";
$css-ui-component-name: "highlight-popup";
@import "../../../src/atoms/highlights/HighlightPopup";

$css-ui-var-prefix: "";
$css-ui-component-name: "expressive-button";

/*
$css-ui-component-name: "expressive-button" !default;

@forward "../../../src/atoms/buttons/SimpleButton";
@use "../../../src/atoms/buttons/SimpleButton" as inherited;
@use "../../../src/atoms/highlights/HighlightRollup" as rollup with (
  $css-ui-var-prefix: inherited.$css-ui-var-prefix + "rollup-",
);
@use "../../../src/atoms/highlights/HighlightPopup" as popup with (
  $css-ui-var-prefix: inherited.$css-ui-var-prefix + "popup-",
);
*/

// ------------------------------------------------------
// ------------------------------------------------------




// Main $variables
$expressive-color: null !default;
$expressive-color--light: guebbit.no-null-var(($expressive-color, #000)) !default;
$expressive-color--dark: guebbit.no-null-var(($expressive-color, #fff)) !default;
$active-expressive-color: null !default;
$active-expressive-color--light: guebbit.no-null-var(($active-expressive-color, $expressive-color--light)) !default;
$active-expressive-color--dark: guebbit.no-null-var(($active-expressive-color, $expressive-color--dark)) !default;

// LIGHT theme
$expressive-on-color: guebbit.color-contrast($expressive-color--light) !default;
$active-expressive-on-color: guebbit.color-contrast($active-expressive-color--light) !default;
$elevation-shadow-color: guebbit.color-shade($color--light, 40%) !default;
$active-elevation-shadow-color: guebbit.color-shade($active-color--light, 40%) !default;

// DARK theme
$expressive-on-color--dark: guebbit.color-contrast($expressive-color--dark) !default;
$active-expressive-on-color--dark: guebbit.color-contrast($active-expressive-color--dark) !default;
$elevation-shadow-color--dark: guebbit.color-shade($color--dark, 40%) !default;
$active-elevation-shadow-color--dark: guebbit.color-shade($active-color--dark, 40%) !default;

// generic
$elevation-height: 8px !default;


%#{$css-ui-class-prefix}#{$css-ui-component-name},
.#{$css-ui-class-prefix}#{$css-ui-component-name} {
  @extend %#{$css-ui-class-prefix}simple-button;

  @include utils.var-builder((
                  (expressive-color, guebbit.extract-colors($expressive-color--light), color),
                  (expressive-on-color, guebbit.extract-colors($expressive-on-color), on-color),
                  (active-expressive-color, guebbit.extract-colors($active-expressive-color--light), active-color),
                  (active-expressive-on-color, guebbit.extract-colors($active-expressive-on-color), active-on-color),

                  (elevation-height, $elevation-height),
  ), $css-ui-var-prefix, $css-ui-component-name, $css-ui-root-prefix);

  --#{$css-ui-var-prefix}elevation-shadow-color: var(--#{$css-ui-var-prefix}#{$css-ui-component-name}-elevation-shadow-color, var(--#{$css-ui-var-prefix}#{$css-ui-root-prefix}shadow-color, #{guebbit.extract-colors($elevation-shadow-color)}));
  --#{$css-ui-var-prefix}active-elevation-shadow-color: var(--#{$css-ui-var-prefix}#{$css-ui-component-name}-active-elevation-shadow-color, var(--#{$css-ui-var-prefix}#{$css-ui-root-prefix}active-shadow-color, #{guebbit.extract-colors($active-elevation-shadow-color)}));
  --#{$css-ui-var-prefix}active-on-background: var(--#{$css-ui-var-prefix}expressive-on-color);


  &.rollup-button {
    @extend %#{$css-ui-class-prefix}highlight-rollup;

    --#{$css-ui-var-prefix}active-background: var(--#{$css-ui-var-prefix}background);
    --#{$css-ui-var-prefix}rollup-color: var(--#{$css-ui-var-prefix}expressive-color);
    --#{$css-ui-var-prefix}rollup-active-color: var(--#{$css-ui-var-prefix}active-expressive-color);
    --#{$css-ui-var-prefix}active-outlined-on-background: var(--#{$css-ui-var-prefix}expressive-on-color);
    --#{$css-ui-var-prefix}active-border-color: var(--#{$css-ui-var-prefix}expressive-color);
  }

  &.popup-button {
    @extend %#{$css-ui-class-prefix}highlight-popup;

    --#{$css-ui-var-prefix}popup-color: var(--#{$css-ui-var-prefix}expressive-color);
    --#{$css-ui-var-prefix}popup-active-color: var(--#{$css-ui-var-prefix}active-expressive-color);
    --#{$css-ui-var-prefix}popup-border-width: var(--#{$css-ui-var-prefix}outlined-border-width);
    --#{$css-ui-var-prefix}active-outlined-on-background: var(--#{$css-ui-var-prefix}expressive-on-color);
    --#{$css-ui-var-prefix}active-border-color: var(--#{$css-ui-var-prefix}expressive-color);

    &.button-outlined{
      border: none !important;

      &::after{
        border-width: var(--#{$css-ui-var-prefix}border-width);
        border-style: solid;
        border-color: var(--#{$css-ui-var-prefix}border-color);
      }
    }

    &.button-rounded{
      &::before,
      &::after{
        border-radius: 28%;
      }
    }

    &.button-circular{
      &::before,
      &::after{
        border-radius: 50%;
      }
    }
  }

  &.strong-elevation{
    box-shadow: 0 var(--#{$css-ui-var-prefix}elevation-height) 0 rgba(var(--#{$css-ui-var-prefix}elevation-shadow-color) / var(--#{$css-ui-var-prefix}#{$css-ui-root-prefix}shadow-level-2, .5)),
                0 0 3px rgba(var(--#{$css-ui-var-prefix}elevation-shadow-color) / var(--#{$css-ui-var-prefix}#{$css-ui-root-prefix}shadow-level-1, .25));

    &.animate-active,
    &.animate-on-active.active,
    &.animate-on-hover:hover {
      // shift button downwards by shadow depth amount
      box-shadow: 0 0 0 rgba(var(--#{$css-ui-var-prefix}elevation-active-shadow-color)), 0 0 0 rgba(0 0 0 / 0.2);
      transform: translate3d(0, var(--#{$css-ui-var-prefix}elevation-height), 0);
    }
  }

  &.animate-active,
  &.animate-on-active.active,
  &.animate-on-hover:hover {
    &.button-outlined{
      &::after{
        border-color: var(--#{$css-ui-var-prefix}active-border-color);
      }
    }
  }
}

/**
 * Dark Theme (changes from default variables)
 */
@mixin theme-dark-builder{
  %#{$css-ui-class-prefix}#{$css-ui-component-name},
  .#{$css-ui-class-prefix}#{$css-ui-component-name} {
    @include utils.var-builder((
                    (expressive-color, guebbit.extract-colors($expressive-color--dark), color),
                    (expressive-on-color, guebbit.extract-colors($expressive-on-color--dark), on-color),
                    (active-expressive-color, guebbit.extract-colors($active-expressive-color--dark), active-color),
                    (active-expressive-on-color, guebbit.extract-colors($active-expressive-on-color--dark), active-on-color),
    ), $css-ui-var-prefix, $css-ui-component-name, $css-ui-root-prefix);

    --#{$css-ui-var-prefix}elevation-shadow-color: var(--#{$css-ui-var-prefix}#{$css-ui-component-name}-elevation-shadow-color, var(--#{$css-ui-var-prefix}#{$css-ui-root-prefix}shadow-color, #{guebbit.extract-colors($elevation-shadow-color--dark)}));
    --#{$css-ui-var-prefix}active-elevation-shadow-color: var(--#{$css-ui-var-prefix}#{$css-ui-component-name}-active-elevation-shadow-color, var(--#{$css-ui-var-prefix}#{$css-ui-root-prefix}active-shadow-color, #{guebbit.extract-colors($active-elevation-shadow-color--dark)}));
  }
}

/**
 * By class
 */
.#{$css-ui-dark-theme-class}{
  @include theme-dark-builder;
}

/**
 * By browser
 */
@media (prefers-color-scheme: dark) {
  @include theme-dark-builder;
}
