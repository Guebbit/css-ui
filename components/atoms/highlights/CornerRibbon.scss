@use "sass:math";
@use "../../../index" as guebbit;

$scss-library-prefix: "" !default;
$scss-library-component-name: "corner-ribbon" !default;
$scss-library-var-prefix: "" !default;

$corner-ribbon-color: #fff !default;
$corner-ribbon-on-color: guebbit.color-contrast($corner-ribbon-color) !default;
$corner-ribbon-fold-color: guebbit.color-shade($corner-ribbon-color, 50%) !default;
$corner-ribbon-shadow-color: guebbit.hex2rgb(#000) !default;
$corner-ribbon-size: 150px !default;
$corner-ribbon-height: math.div($corner-ribbon-size, 3) - 2px !default;
$corner-ribbon-font-size: 18px !important;
$corner-ribbon-padding: math.div($corner-ribbon-size, 10) !default;

// constants
$corner-ribbon-position-1: 16%;
$corner-ribbon-position-2: 20%;
$corner-ribbon-position-3: 1.5%;

%#{$scss-library-prefix}#{$scss-library-component-name},
.#{$scss-library-prefix}#{$scss-library-component-name} {
  --#{$scss-library-var-prefix}color: #{$corner-ribbon-color};
  --#{$scss-library-var-prefix}on-color: #{$corner-ribbon-on-color};
  --#{$scss-library-var-prefix}fold-color: #{$corner-ribbon-fold-color};
  --#{$scss-library-var-prefix}shadow-color: #{$corner-ribbon-shadow-color};
  --#{$scss-library-var-prefix}size: #{$corner-ribbon-size};
  --#{$scss-library-var-prefix}height: #{$corner-ribbon-height};
  --#{$scss-library-var-prefix}font-size: #{$corner-ribbon-font-size};
  --#{$scss-library-var-prefix}padding: #{$corner-ribbon-padding};

  width: var(--#{$scss-library-var-prefix}size);
  height: var(--#{$scss-library-var-prefix}size);
  overflow: hidden;
  position: absolute;

  &::before,
  &::after {
    position: absolute;
    z-index: -1;
    content: '';
    display: block;
    border: 5px solid var(--#{$scss-library-var-prefix}fold-color);
  }

  & > * {
    position: absolute;
    display: block;
    width: calc(var(--#{$scss-library-var-prefix}size) * 1.5);
    padding: var(--#{$scss-library-var-prefix}padding) 0;
    background-color: var(--#{$scss-library-var-prefix}color);
    box-shadow: 0 5px 10px rgba(var(--#{$scss-library-var-prefix}shadow-color),.1);
    color: var(--#{$scss-library-var-prefix}on-color);
    text-shadow: 0 1px 1px rgba(var(--#{$scss-library-var-prefix}shadow-color),.2);
    line-height: 1;
    font-size: var(--#{$scss-library-var-prefix}font-size);
    text-align: center;
    min-height: var(--#{$scss-library-var-prefix}height);
  }

  &.ribbon-top-left {
    top: -$corner-ribbon-position-3;
    left: -$corner-ribbon-position-3;

    &::before,
    &::after {
      border-top-color: transparent;
      border-left-color: transparent;
    }

    &::before {
      top: 0;
      right: 0;
    }

    &::after {
      bottom: 0;
      left: 0;
    }

    & > * {
      right: -$corner-ribbon-position-1;
      top: $corner-ribbon-position-2;
      transform: rotate(-45deg);
    }
  }

  &.ribbon-top-right {
    top: -$corner-ribbon-position-3;
    right: -$corner-ribbon-position-3;

    &::before,
    &::after {
      border-top-color: transparent;
      border-right-color: transparent;
    }

    &::before {
      top: 0;
      left: 0;
    }

    &::after {
      bottom: 0;
      right: 0;
    }

    & > * {
      left: -$corner-ribbon-position-1;
      top: $corner-ribbon-position-2;
      transform: rotate(45deg);
    }
  }


  &.ribbon-bottom-left {
    bottom: -$corner-ribbon-position-3;
    left: -$corner-ribbon-position-3;

    &::before,
    &::after {
      border-bottom-color: transparent;
      border-left-color: transparent;
    }

    &::before {
      bottom: 0;
      right: 0;
    }

    &::after {
      top: 0;
      left: 0;
    }

    & > * {
      right: -$corner-ribbon-position-1;
      bottom: $corner-ribbon-position-2;
      transform: rotate(225deg);
    }
  }


  &.ribbon-bottom-right {
    bottom: -$corner-ribbon-position-3;
    right: -$corner-ribbon-position-3;

    &::before,
    &::after {
      border-bottom-color: transparent;
      border-right-color: transparent;
    }

    &::before {
      bottom: 0;
      left: 0;
    }

    &::after {
      top: 0;
      right: 0;
    }

    & > * {
      left: -$corner-ribbon-position-1;
      bottom: $corner-ribbon-position-2;
      transform: rotate(-225deg);
    }
  }
}