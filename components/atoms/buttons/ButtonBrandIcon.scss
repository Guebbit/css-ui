@use "../../../index" as guebbit;
@use "../../../components/atoms/buttons/SimpleButton" as button;

$scss-library-prefix: "" !default;
$scss-library-component-name: "button-brand-icon" !default;
$scss-library-var-prefix: "" !default;

$button-brand-icon-color: #000 !default;
$button-brand-icon-on-color: guebbit.color-contrast($button-brand-icon-color) !default;
$button-brand-icon-active-color: #000 !default;
$button-brand-icon-active-on-color: guebbit.color-contrast($button-brand-icon-active-color) !default;
$button-brand-icon-duration: 0.5s !default;
$button-brand-icon-size: 90px !default;

//$button-brand-icon-color: red;
//$button-brand-icon-on-color: green;

%#{$scss-library-prefix}#{$scss-library-component-name},
.#{$scss-library-prefix}#{$scss-library-component-name} {
  // TODO come fare con le estensioni?
  @extend %simple-button;

  --#{$scss-library-var-prefix}color: #{$button-brand-icon-color};
  --#{$scss-library-var-prefix}on-color: #{$button-brand-icon-on-color};
  --#{$scss-library-var-prefix}active-color: #{$button-brand-icon-active-color};
  --#{$scss-library-var-prefix}active-on-color: #{$button-brand-icon-active-on-color};
  --#{$scss-library-var-prefix}duration: #{$button-brand-icon-duration};
  --#{$scss-library-var-prefix}size: #{$button-brand-icon-size};

  --#{$scss-library-var-prefix}outlined-color: #{$button-brand-icon-color};
  --#{$scss-library-var-prefix}outlined-on-color: #{$button-brand-icon-on-color};
  --#{$scss-library-var-prefix}active-outlined-color: #{$button-brand-icon-active-color};
  --#{$scss-library-var-prefix}active-outlined-on-color: #{$button-brand-icon-active-on-color};

  font-size: var(--#{$scss-library-var-prefix}size);
  min-width: 1em;
  min-height: 1em;
  color: var(--#{$scss-library-var-prefix}on-color);
  // background: transparent;
  text-decoration: none;
  overflow: hidden;
  transition: all var(--#{$scss-library-var-prefix}duration) cubic-bezier(0.31, -0.105, 0.43, 1.59);

  &::before,
  .button-image,
  .button-icon {
    position: absolute;
    transition: all var(--#{$scss-library-var-prefix}duration) cubic-bezier(0.31, -0.105, 0.43, 1.59);
  }

  &::before {
    content: "";
    z-index: -1;
    background-color: var(--#{$scss-library-var-prefix}color);
    width: 120%;
    height: 120%;
    top: 90%;
    left: -120%;
  }

  .button-icon,
  .button-image{
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .button-icon {
    font-size: 0.5em;
  }

  .button-image{
    width: 1em;
    height: 1em;
    object-fit: cover;
  }

  &.button-circular{
    &::before{
      border-radius: 50%;
    }
  }

  &.button-rounded{
    &::before{
      transform: rotate(45deg);
    }
  }

  //&.button-plain,
  //&.button-outlined{
  //  --33simple-button-color: #{$button-brand-icon-color};
  //  --33simple-button-active-color: #{$button-brand-icon-active-color};
  //  --33simple-button-outlined-border-color: #{$button-brand-icon-color};
  //  --33simple-button-active-outlined-border-color: #{$button-brand-icon-active-color};
  //}

  &.button-small {
    font-size: calc(var(--#{$scss-library-var-prefix}size) * 0.5);
  }

  &.animate-active,
  &.animate-on-active.active,
  &.animate-on-hover:hover {
    color: var(--#{$scss-library-var-prefix}active-on-color);

    &::before {
      top: -10%;
      left: -10%;
      background: var(--#{$scss-library-var-prefix}active-color);
    }

    img{
      opacity: 0.5;
      transition: opacity var(--#{$scss-library-var-prefix}duration) ease-in-out;
    }
  }
}
