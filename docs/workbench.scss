@use "sass:math";
@import "index";

$white-color: #fff;
$black-color: #000;

$scss-library-prefix: "" !default;
.#{$scss-library-prefix}xxxxxxxxxxxxxxx {
  // ---
}


// TODO mettere ::: raw <code> ::: ovunque
// TODO mettere variabili css ai vari item
// TODO mettere $scss-library-prefix: "" !default; ovunque (in vue-library metterÃ² guebbit-vue-?)
// TODO mettere abstract\silent class per ogni metodo? %....

// TODO IMPORTANT: card-shadow, card-boxshadow, card-overlay, etc


// https://css-tricks.com/snippets/css/a-guide-to-flexbox/
// https://css-tricks.com/understanding-flex-grow-flex-shrink-and-flex-basis/

// http://localhost:8080/molecules/cards/SimpleCard.html#simple-card

// https://guebbit.com/admin/login.php?k=29b5d51b87944c4762e19990
// https://guebbit.com/admin/view/310
// https://guebbit.com/admin/archive.php?cat=3



@import "components/atoms/buttons/SimpleButton";
@import "components/molecules/cards/SimpleCard";


$event-long-card-color: $primary-color;

$event-long-card-mobile-threshold: 600px !default;
$event-long-card-height: 200px !default;
$event-long-card-padding: 16px !default;
$event-long-card-color: #000 !default;
$event-long-card-icon: $event-long-card-color !default;
$event-long-card-text: #000 !default;
$event-long-card-background: guebbit-contrast($event-long-card-text) !default;
$event-long-card-time-text: guebbit-contrast($event-long-card-color) !default;
$event-long-card-time-background: $event-long-card-color !default;

%#{$scss-library-prefix}event-long-card,
.#{$scss-library-prefix}event-long-card {
  @extend %simple-card;

  --simple-card-icon-color: var(--event-long-card-icon, #{$event-long-card-icon});

  height: var(--event-long-card-height, $event-long-card-height);
  flex-direction: row;
  width: 100%;
  color: var(--event-long-card-text, $event-long-card-text);
  background-color: var(--event-long-card-background, $event-long-card-background);
  padding: 0;

  .card-button{
    @extend %simple-button, .button-small;
  }

  & > time,
  & > .card-image {
    width: var(--event-long-card-height, $event-long-card-height);
    margin: 0;
  }


  & > time {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    flex-direction: column;
    color: var(--event-long-card-time-text, $event-long-card-time-text);
    background-color: var(--event-long-card-time-background, $event-long-card-time-background);
    border-radius: 0 !important;
    padding: calc(var(--simple-card-padding, $simple-card-padding) * 0.5) 0 calc(var(--simple-card-padding, $simple-card-padding) * 0.5) 0;
    text-align: center;
    text-transform: uppercase;

    & > span {
      display: block;
      line-height: 1;
      font-size: 1.5em;

      &:nth-child(1) {
        font-size: 5em;
        font-weight: 300;
      }

      &:nth-child(2){
        font-size: 2em;
        font-weight: 900;
      }

      &:nth-child(3){
        font-size: 1.2em;
      }

      &:nth-child(4){
        font-size: 0.75em;
      }
    }
  }

  .card-image{
    position: relative;
    overflow: hidden;

    img {
      position: absolute;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }

  .card-content{
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: var(--event-long-card-padding, $event-long-card-padding) 2em var(--event-long-card-padding, $event-long-card-padding) var(--event-long-card-padding, $event-long-card-padding);
  }

  .card-actions {
    &.card-actions-absolute {
      padding: 0;
      gap: 0;
      flex-direction: column;
    }
  }

  @media (max-width: $event-long-card-mobile-threshold){
    flex-wrap: wrap;
    height: auto;

    & > time,
    & > .card-image {
      width: 50%;
    }

    .card-content {
      gap: var(--simple-card-padding, $simple-card-padding);
      padding: var(--event-long-card-padding, $event-long-card-padding);
    }
  }
}














$image-hover-card-mobile-threshold: 600px !default;
$image-hover-card-height: 600px !default;
$image-hover-card-height-mobile: $image-hover-card-height !default;
$image-hover-card-transition-duration: 0.5s !default;

@mixin image-hover-card-mobile{
  & > .card-image {
    height: 20%;

    & > img {
      transform: translate(-50%,-50%) scale(1.1);
    }
  }

  & > .card-content {
    opacity: 1;
    height: 60%;
  }
}

%#{$scss-library-prefix}image-hover-card,
.#{$scss-library-prefix}image-hover-card {
  position: relative;
  height: $image-hover-card-height;
  transition: box-shadow 0.2s, background-color 0.2s;

  & > .card-image {
    position: absolute;
    top: 20%;
    left: 0;
    height: 100%;
    width: 100%;
    transition: height $image-hover-card-transition-duration;

    & > img {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.8);
      transition: width $image-hover-card-transition-duration, transform $image-hover-card-transition-duration;
      display: block;
      width: 100%;
      object-fit: cover;
    }
  }

  & > .card-content {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 0;
    opacity: 0;
    overflow: hidden;
    transition: opacity $image-hover-card-transition-duration, height $image-hover-card-transition-duration, padding $image-hover-card-transition-duration;
  }

  &.contained {
    & > .card-image {
      overflow: hidden;
    }
  }

  &.animate-active,
  &.animate-on-active.active,
  &.animate-on-hover:hover {
    @include image-hover-card-mobile;
  }

  &.animate-mobile {
    @media (max-width: $image-hover-card-mobile-threshold) {
      @include image-hover-card-mobile;
    }
  }

  @media (max-width: $image-hover-card-mobile-threshold) {
    height: $image-hover-card-height-mobile;
  }
}




$effect-mirror-reflection-color: #fff !default;
$effect-mirror-reflection-color-1: $effect-mirror-reflection-color !default;
$effect-mirror-reflection-color-2: rgba($effect-mirror-reflection-color,0.5) !default;
$effect-mirror-reflection-duration: 0.2s !default;
$effect-mirror-reflection-opacity: 0.1 !default;
$effect-mirror-reflection-rotation: 35deg !default;
$effect-mirror-reflection-position-top: -90% !default;
$effect-mirror-reflection-active-opacity: 0.2 !default;
$effect-mirror-reflection-active-rotation: 10deg !default;  // 25deg if vertical
$effect-mirror-reflection-active-position-top: -40% !default;

%effect-mirror-reflection-active{
  transform: rotate(var(--effect-mirror-reflection-active-rotation, $effect-mirror-reflection-active-rotation));
  top: var(--effect-mirror-reflection-active-position-top, $effect-mirror-reflection-active-position-top);
  opacity: var(--effect-mirror-reflection-active-opacity, $effect-mirror-reflection-active-opacity);
}

.effect-mirror-reflection {
  position: absolute;
  content: '';
  z-index: 99;
  width: 200%;
  height: 100%;
  top: var(--effect-mirror-reflection-position-top, $effect-mirror-reflection-position-top);
  left: 0;
  opacity: var(--effect-mirror-reflection-opacity, $effect-mirror-reflection-opacity);
  transform: rotate(var(--effect-mirror-reflection-rotation, $effect-mirror-reflection-rotation));
  background: linear-gradient(to top, transparent, var(--effect-mirror-reflection-color-1, $effect-mirror-reflection-color-1) 15%, var(--effect-mirror-reflection-color-2, $effect-mirror-reflection-color-2));
  transition:
          transform var(--effect-mirror-reflection-duration, $effect-mirror-reflection-duration),
          top var(--effect-mirror-reflection-duration, $effect-mirror-reflection-duration),
          opacity var(--effect-mirror-reflection-duration, $effect-mirror-reflection-duration);

  &.animate-active,
  &.animate-on-active.active,
  &.animate-on-hover:hover {
    @extend %effect-mirror-reflection-active;
  }
}

.effect-mirror-reflection-animate-active,
.effect-mirror-reflection-animate-on-active.active,
.effect-mirror-reflection-animate-on-hover:hover {
  .effect-mirror-reflection {
    @extend %effect-mirror-reflection-active;
  }
}