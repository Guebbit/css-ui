@use "sass:list";

// filled in /global/colors
$g-colors-collection: () !default;

@mixin guebbit-include-brand-colors($brand-list: (), $prefix: "") {
  @each $sname, $scolor in map-get($g-colors-collection, "brands") {
    // if brand list is filled, need to exclude all except the brands in the list
    @if length($brand-list) < 1 OR map-has-key($brand-list, $sname) {
      // if it's a fallback, then I remove the "-fallback" so it will just
      // substitute the original where it needs a fallback
      @if g-ends-with($sname, "-fallback") {
        .#{$prefix}#{list.nth(g-split($sname, "-"), 1)}-color {
          color: $scolor !important;
        }
      } @else {
        // normal
        .#{$prefix}#{$sname}-color {
          color: $scolor !important;

          &::after,
          &::before {
            background: $scolor !important;
          }

          &.hover-bg {
            &:hover {
              color: inherit !important;
              background: $scolor !important;
            }
          }
        }
      }
    }
  }
}

/**
  Flex gap
  @param {Array} measure-list - list of px/%/auto/etc
 */
@mixin guebbit-include-flex-gap($measure-list: (), $prefix: "") {
  @each $val in $measure-list {
    .#{$prefix}flex-gap-#{$val} {
      gap: #{$val}px !important;
    }
  }
}

/**
  Font size in em & rem
  @param {Array} measure-list - list of px/%/auto/etc
 */
@mixin guebbit-include-font-size($measure-list: (), $prefix: "") {
  @each $val in $measure-list {
    .#{$prefix}font-em-#{$val} {
      font-size: #{$val}em !important;
    }
    .#{$prefix}font-rem-#{$val} {
      font-size: #{$val}rem !important;
    }
  }
}

/**
  t - applies the spacing for margin-top and padding-top
  b - applies the spacing for margin-bottom and padding-bottom
  l - applies the spacing for margin-left and padding-left
  r - applies the spacing for margin-right and padding-right
  x - applies the spacing for both *-left and *-right
  y - applies the spacing for both *-top and *-bottom
  a - applies the spacing for the property in all directions
  @param {Array} measure-list - list of px/%/auto/etc
 */
@mixin guebbit-include-margin($measure-list: (), $prefix: "") {
  // custom
  .#{$prefix}mx-auto {
    margin-right: auto !important;
    margin-left: auto !important;
  }
  // loop
  @each $val in $measure-list {
    .#{$prefix}mt-#{$val} {
      margin-top: #{$val}px !important;
    }
    .#{$prefix}mb-#{$val} {
      margin-bottom: #{$val}px !important;
    }
    .#{$prefix}ml-#{$val} {
      margin-left: #{$val}px !important;
    }
    .#{$prefix}mr-#{$val} {
      margin-right: #{$val}px !important;
    }
    .#{$prefix}mx-#{$val} {
      margin-right: #{$val}px !important;
      margin-left: #{$val}px !important;
    }
    .#{$prefix}my-#{$val} {
      margin-top: #{$val}px !important;
      margin-bottom: #{$val}px !important;
    }
    .#{$prefix}ma-#{$val} {
      margin: #{$val}px !important;
    }
  }
}

@mixin guebbit-include-padding($measure-list: (), $prefix: "") {
  @each $val in $measure-list {
    .#{$prefix}pt-#{$val} {
      padding-top: #{$val}px !important;
    }
    .#{$prefix}pb-#{$val} {
      padding-bottom: #{$val}px !important;
    }
    .#{$prefix}pl-#{$val} {
      padding-left: #{$val}px !important;
    }
    .#{$prefix}pr-#{$val} {
      padding-right: #{$val}px !important;
    }
    .#{$prefix}px-#{$val} {
      padding-right: #{$val}px !important;
      padding-left: #{$val}px !important;
    }
    .#{$prefix}py-#{$val} {
      padding-top: #{$val}px !important;
      padding-bottom: #{$val}px !important;
    }
    .#{$prefix}pa-#{$val} {
      padding: #{$val}px !important;
    }
  }
}
