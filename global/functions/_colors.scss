@use "sass:math";

/**
  Gives %, less than 50 darker is better, less than 50, lighter.
 */
@function guebbit-brightness($color) {
  @if $color == transparent {
    @return 100;
  }
  @return math.div(((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)), 255 * 100%);
}

/**
  Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
 */
@function guebbit-contrast($color: #fff, $dark: #000, $light: #fff) {
  $color-brightness: guebbit-brightness($color);
  $light-text-brightness: guebbit-brightness($light);
  $dark-text-brightness: guebbit-brightness($dark);

  @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
}

/**
  Hex to RGBa
 */
@function guebbit-hex2rgba($color: #fff, $opacity: 1){
  @return transparentize($color, $opacity);
}

/**
  Hex to RGBa without parentesis (for vuetify-like theming)
 */
@function guebbit-hex2rgbcore($color: #fff){
  @return red($color), green($color), blue($color);
}

/**
 TODO
 first parameter MUST be number
*/
 @function guebbit-hex2hsl($color: #fff){
  @return hsl(str-slice(quote(hue($color)), 1, -4), saturation($color), lightness($color))
}

/**
 TODO
 How to convert decimal in hex?
 */
@function guebbit-rgb2hex($color: #fff, $opacity: 1){
  @return #{'##{red($color)}#{green($color)}#{blue($color)}'};
}

/**
 TODO
 */
@mixin guebbit-hsl-variables($color: #fff) {
  :root {
    // --#{$color}-h: #{hue($color)};
    // --#{$color}-h: #{str-slice(quote(hue($color)), 1, -4)};
    --#{$color}-s: #{saturation($color)};
    --#{$color}-l: #{lightness($color)};
  }
}