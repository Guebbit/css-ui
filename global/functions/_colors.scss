@use "sass:math";

$guebbit-colors-collection: () !default;

// usage: guebbit-color-get("name_of_color", "type_of_color")
// helper to avoid repeating map-get($materialize_colors, ...)
@function guebbit-color-get($color, $type) {
  @if map-has-key($guebbit-colors-collection, $color) {
    $curr-color: map-get($guebbit-colors-collection, $color);

    @if map-has-key($curr-color, $type) {
      @return map-get($curr-color, $type);
    }
  }
  // @warn "Unknown `#{$color}` - `#{$type}` in $guebbit-colors-collection.";
  @return "#fff";
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
// function credited to https://getbootstrap.com/
@function opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100%);
}

// Tint a color: mix a color with white
// function credited to https://getbootstrap.com/
@function tint-color($color, $weight) {
  @return mix(white, $color, $weight);
}

// Shade a color: mix a color with black
// function credited to https://getbootstrap.com/
@function shade-color($color, $weight) {
  @return mix(black, $color, $weight);
}

// Shade the color if the weight is positive, else tint it
// function credited to https://getbootstrap.com/
@function shift-color($color, $weight) {
  @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}

/**
 * Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
 */
@function guebbit-contrast($color: #fff, $dark: #000, $light: #fff) {
  $color-brightness: guebbit-brightness($color);
  $light-text-brightness: guebbit-brightness($light);
  $dark-text-brightness: guebbit-brightness($dark);

  @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
}



// Return WCAG2.1 relative luminance
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://en.wikipedia.org/wiki/Relative_luminance
// Gives %, less than 50 darker is better, less than 50, lighter.
@function guebbit-brightness($color) {
  // fallback
  @if $color == transparent {
    @return 100;
  }
  @return math.div(((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)), 255 * 100%);
}

/**
  Hex to RGBa
 */
@function guebbit-hex2rgba($color: #fff, $opacity: 1){
  @return transparentize($color, $opacity);
}

/**
  Hex to RGBa without parentesis (for vuetify-like theming)
 */
@function guebbit-hex2rgbcore($color: #fff){
  @return red($color), green($color), blue($color);
}