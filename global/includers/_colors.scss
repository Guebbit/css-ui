@use "sass:list";
@use "sass:string";
@use "../functions/colors" as guebbit-color;

/**
  Create all the needed classes for the requested colors
  $branch-list: when filled: need to exclude all except the brands in the list (aka: include only listed brands)
  $feature-list: additional classes, may become cumbersome and many are not needed. Use with care.
    - root
    - on-root (color's "best contrast" partner color)
    - color
    - background
    - border
    - pseudo (bg only, color very rarely used)
    - hover
    $prefix: prefix that applies to classes
 */
@mixin include-colors($branch-list: (), $feature-list: ("color", "background"), $prefix: "") {
  // for every branch
  @each $branch-name, $branch in guebbit-color.$colors-collection {
    // check that there is no $branch-list or, if present, it's correctly whitelisted
    @if list.length($branch-list) < 1 or list.index($branch-list, $branch-name) {

      // for every leaf
      @each $sname, $scolor in $branch {

        @if list.index($feature-list, "color") and not list.index($branch-name, "advanced") {
          .#{$prefix}#{$branch-name}-#{$sname}-color {
            color: $scolor !important;
          }
        }

        @if list.index($feature-list, "background") {
          .#{$prefix}#{$branch-name}-#{$sname}-bg {
            background: $scolor !important;
          }
        }

        @if list.index($feature-list, "border") and not list.index($branch-name, "advanced") {
          .#{$prefix}#{$branch-name}-#{$sname}-border {
            border-color: $scolor !important;
          }
        }

        @if list.index($feature-list, "pseudo"){
          .#{$prefix}#{$branch-name}-#{$sname}-pseudo-bg {
            &::after,
            &::before {
              background: $scolor !important;
            }
          }
        }

        @if list.index($feature-list, "hover"){

          @if list.index($feature-list, "color") and not list.index($branch-name, "advanced") {
            .#{$prefix}#{$branch-name}-#{$sname}-hover-color {
              &:hover {
                color: $scolor !important;
              }
            }
          }

          @if list.index($feature-list, "background") {
            .#{$prefix}#{$branch-name}-#{$sname}-hover-bg {
              &:hover {
                background: $scolor !important;
              }
            }
          }

          @if list.index($feature-list, "border") and not list.index($branch-name, "advanced") {
            .#{$prefix}#{$branch-name}-#{$sname}-hover-border {
              &:hover {
                border-color: $scolor !important;
              }
            }
          }
          @if list.index($feature-list, "pseudo") {
            .#{$prefix}#{$branch-name}-#{$sname}-hover-pseudo-bg {
              &:hover{
                &::after,
                &::before {
                  background: $scolor !important;
                }
              }
            }
          }
        }
      }
    }
  }

  /**
   * CSS VARS on root (they will be translated in "RGB" instead of "HEX"
   */
  :root{
    @if list.index($feature-list, "root"){
      @each $branch-name, $branch in guebbit-color.$colors-collection {
        @each $sname, $scolor in $branch {
          --#{$prefix}#{$branch-name}-#{$sname}: #{guebbit-color.hex2rgb($scolor)};
        }
      }
    }
    @if list.index($feature-list, "on-root"){
      @each $branch-name, $branch in guebbit-color.$colors-collection {
        @each $sname, $scolor in $branch {
          //@if type-of($scolor) == color {
          --#{$prefix}on-#{$branch-name}-#{$sname}: #{guebbit-color.hex2rgb(guebbit-color.color-contrast($scolor))};
          //}
        }
      }
    }
  }
}