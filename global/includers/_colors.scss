@use "sass:list";

$guebbit-colors-collection: () !default;

/**
  Create all the needed classes for the requested colors
  $branch-list: when filled: need to exclude all except the brands in the list (aka: include only listed brands)
  $prefix: prefix that applies to classes
  $advanced: additional classes, may become cumbersome and many are not needed. Use with care.
 */
@mixin guebbit-include-colors($branch-list: (), $prefix: "", $advanced: false) {
  // for every branch
  @each $branch-name, $branch in $guebbit-colors-collection {
    // check that there is no $branch-list or, if present, it's correctly whitelisted
    @if length($branch-list) < 1 OR map-has-key($branch-list, $branch-name) {
      // for every leaf
      @each $sname, $scolor in $branch {
        // check that there is no $branch-list or, if present, it's correctly whitelisted
        @if length($branch-list) < 1 OR map-has-key($branch-list, $sname) {
          // if it's a fallback, then I remove the "-fallback" so it will just
          // substitute the original where it needs a fallback
          @if guebbit-string-ends-with($sname, "-fallback") {
            .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-color {
              color: $scolor !important;
            }
            .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-bg {
              background: $scolor !important;
            }
            @if $advanced{
              .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-border {
                border-color: $scolor !important;
              }
              .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-pseudo-color {
                &::after,
                &::before {
                  color: $scolor !important;
                }
              }
              .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-pseudo-bg {
                &::after,
                &::before {
                  background: $scolor !important;
                }
              }
              .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-hover-color {
                &:hover {
                  color: $scolor !important;
                }
              }
              .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-hover-bg {
                &:hover {
                  background: $scolor !important;
                }
              }
              .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-border-hover {
                &:hover {
                  border-color: $scolor !important;
                }
              }
            }
          } @else {
            .#{$prefix}#{$sname}-color {
              color: $scolor !important;
            }
            .#{$prefix}#{$sname}-bg {
              background: $scolor !important;
            }
            @if $advanced{
              .#{$prefix}#{$sname}-border {
                border-color: $scolor !important;
              }
              .#{$prefix}#{$sname}-pseudo-color {
                &::after,
                &::before {
                  color: $scolor !important;
                }
              }
              .#{$prefix}#{$sname}-pseudo-bg {
                &::after,
                &::before {
                  background: $scolor !important;
                }
              }
              .#{$prefix}#{$sname}-hover-color {
                &:hover {
                  color: $scolor !important;
                }
              }
              .#{$prefix}#{$sname}-hover-bg {
                &:hover {
                  background: $scolor !important;
                }
              }
              .#{$prefix}#{$sname}-border-hover {
                &:hover {
                  border-color: $scolor !important;
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
  Shortcut for brand colors
 */
@mixin guebbit-include-brand-colors($brand-list: (), $prefix: "", $advanced: false) {
  @each $sname, $scolor in map-get($guebbit-colors-collection, "brands") {
    // if brand list is filled, need to exclude all except the brands in the list
    // (aka: include only listed brands)
    @if length($brand-list) < 1 OR map-has-key($brand-list, $sname) {
      // if it's a fallback, then I remove the "-fallback" so it will just
      // substitute the original where it needs a fallback
      @if guebbit-string-ends-with($sname, "-fallback") {
        .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-color {
          color: $scolor !important;
        }
        .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-bg {
          background: $scolor !important;
        }
        @if $advanced{
          .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-border {
            border-color: $scolor !important;
          }
          .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-pseudo-color {
            &::after,
            &::before {
              color: $scolor !important;
            }
          }
          .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-pseudo-bg {
            &::after,
            &::before {
              background: $scolor !important;
            }
          }
          .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-hover-color {
            &:hover {
              color: $scolor !important;
            }
          }
          .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-hover-bg {
            &:hover {
              background: $scolor !important;
            }
          }
          .#{$prefix}#{list.nth(guebbit-split($sname, "-"), 1)}-border-hover {
            &:hover {
              border-color: $scolor !important;
            }
          }
        }
      } @else {
        .#{$prefix}#{$sname}-color {
          color: $scolor !important;
        }
        .#{$prefix}#{$sname}-bg {
          background: $scolor !important;
        }
        @if $advanced{
          .#{$prefix}#{$sname}-border {
            border-color: $scolor !important;
          }
          .#{$prefix}#{$sname}-pseudo-color {
            &::after,
            &::before {
              color: $scolor !important;
            }
          }
          .#{$prefix}#{$sname}-pseudo-bg {
            &::after,
            &::before {
              background: $scolor !important;
            }
          }
          .#{$prefix}#{$sname}-hover-color {
            &:hover {
              color: $scolor !important;
            }
          }
          .#{$prefix}#{$sname}-hover-bg {
            &:hover {
              background: $scolor !important;
            }
          }
          .#{$prefix}#{$sname}-border-hover {
            &:hover {
              border-color: $scolor !important;
            }
          }
        }
      }
    }
  }
}

/**
  Shortcut for material colors
 */
@mixin guebbit-include-material-colors($color-list: (), $prefix: "", $advanced: false) {

}